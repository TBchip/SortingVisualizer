{"version":3,"sources":["SortingVisualizer/SortingAlgorithms.tsx","SortingVisualizer/SortingVisualizer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["bubbleSortAlgorithm","sortingVisualizer","a","state","nums","msBetweenSwaps","i","length","j","x","setState","delay","mergeSortAlgorithm","mergeSortAlgorithmHelper","currentBatch","divisionPoint","Math","ceil","slice","sorted1","sorted2","newNums","index1","index2","push","newStateNums","console","log","splice","quickSortAlgorithm","quickSortAlgorithmHelper","pivot","isNaN","selectionSortAlgorithm","lowestIndex","bogoSortAlgorithm","sorted","randomizeNums","ms","Promise","resolve","setTimeout","SortingVisualizer","props","amountNums","headerHeightStr","window","getComputedStyle","document","documentElement","getPropertyValue","numContainerHeight","innerHeight","substring","paddingStr","padding","maxHeight","round","random","newNumsAmount","event","setNumAmount","target","value","amount","setMSBetween","className","type","min","max","innerWidth","step","onChange","numAmountSliderChange","id","msBetweenInputChange","onClick","bubbleSort","mergeSort","quickSort","selectionSort","bogoSort","map","key","style","height","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc2084cb.chunk.js","sourcesContent":["import SortingVisualizer from \"./SortingVisualizer\";\r\n\r\nasync function bubbleSortAlgorithm(sortingVisualizer: SortingVisualizer) {\r\n\tconst { nums, msBetweenSwaps } = sortingVisualizer.state;\r\n\r\n\tfor (let i = 0; i < nums.length - 1; i++) {\r\n\t\tfor (let j = 0; j < nums.length - i; j++) {\r\n\t\t\tif (nums[j] > nums[j + 1]) {\r\n\t\t\t\tlet x = nums[j];\r\n\t\t\t\tnums[j] = nums[j + 1];\r\n\t\t\t\tnums[j + 1] = x;\r\n\r\n\t\t\t\tsortingVisualizer.setState({\r\n\t\t\t\t\tnums: nums,\r\n\t\t\t\t});\r\n\t\t\t\tawait delay(msBetweenSwaps);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function mergeSortAlgorithm(sortingVisualizer: SortingVisualizer) {\r\n\tconst { nums } = sortingVisualizer.state;\r\n\r\n\tmergeSortAlgorithmHelper(nums, sortingVisualizer, [0, nums.length]);\r\n}\r\nasync function mergeSortAlgorithmHelper(nums: number[], sortingVisualizer: SortingVisualizer, currentBatch: number[]) {\r\n\tif (nums.length === 1) return nums;\r\n\r\n\tlet divisionPoint = Math.ceil(nums.length / 2);\r\n\tlet sorted1 = await mergeSortAlgorithmHelper(nums.slice(0, divisionPoint), sortingVisualizer, [currentBatch[0], currentBatch[0] + divisionPoint]);\r\n\tlet sorted2 = await mergeSortAlgorithmHelper(nums.slice(divisionPoint, nums.length), sortingVisualizer, [currentBatch[0] + divisionPoint, currentBatch[1]]);\r\n\r\n\tlet newNums: number[] = [];\r\n\tlet index1 = 0;\r\n\tlet index2 = 0;\r\n\twhile (index1 < sorted1.length || index2 < sorted2.length) {\r\n\t\tif (index1 >= sorted1.length) {\r\n\t\t\tnewNums.push(sorted2[index2]);\r\n\t\t\tindex2++;\r\n\t\t} else if (index2 >= sorted2.length) {\r\n\t\t\tnewNums.push(sorted1[index1]);\r\n\t\t\tindex1++;\r\n\t\t} else if (sorted1[index1] < sorted2[index2]) {\r\n\t\t\tnewNums.push(sorted1[index1]);\r\n\t\t\tindex1++;\r\n\t\t} else {\r\n\t\t\tnewNums.push(sorted2[index2]);\r\n\t\t\tindex2++;\r\n\t\t}\r\n\r\n\t\tlet newStateNums: number[] = sortingVisualizer.state.nums;\r\n\t\tconsole.log(newStateNums);\r\n\t\tnewStateNums.splice(currentBatch[0], newNums.length, ...newNums);\r\n\t\tawait sortingVisualizer.setState({\r\n\t\t\tnums: newStateNums,\r\n\t\t});\r\n\r\n\t\tawait delay(sortingVisualizer.state.msBetweenSwaps);\r\n\t}\r\n\r\n\treturn newNums;\r\n}\r\n\r\nasync function quickSortAlgorithm(sortingVisualizer: SortingVisualizer) {\r\n\tconst { nums } = sortingVisualizer.state;\r\n\r\n\tlet newNums: number[] = await quickSortAlgorithmHelper(sortingVisualizer, nums, [0, nums.length]);\r\n}\r\nasync function quickSortAlgorithmHelper(sortingVisualizer: SortingVisualizer, nums: number[], currentBatch: number[]) {\r\n\tif (currentBatch[0] + 1 >= currentBatch[1]) return nums;\r\n\r\n\tlet i = currentBatch[0] + 1;\r\n\tlet j = currentBatch[1] - 1;\r\n\tlet pivot = currentBatch[0];\r\n\r\n\twhile (true) {\r\n\t\twhile (!isNaN(nums[i]) && nums[i] <= nums[pivot]) i++;\r\n\t\twhile (!isNaN(nums[j]) && nums[j] > nums[pivot]) j--;\r\n\r\n\t\tif (j < i) break;\r\n\r\n\t\tlet x = nums[i];\r\n\t\tnums[i] = nums[j];\r\n\t\tnums[j] = x;\r\n\r\n\t\tawait sortingVisualizer.setState({\r\n\t\t\tnums: nums,\r\n\t\t});\r\n\t\tawait delay(sortingVisualizer.state.msBetweenSwaps);\r\n\t}\r\n\r\n\tlet x = nums[j];\r\n\tnums[j] = nums[pivot];\r\n\tnums[pivot] = x;\r\n\r\n\tawait sortingVisualizer.setState({\r\n\t\tnums: nums,\r\n\t});\r\n\tawait delay(sortingVisualizer.state.msBetweenSwaps);\r\n\r\n\tlet newNums: number[] = await quickSortAlgorithmHelper(sortingVisualizer, nums, [currentBatch[0], j]);\r\n\tnewNums = await quickSortAlgorithmHelper(sortingVisualizer, newNums, [j + 1, currentBatch[1]]);\r\n\r\n\treturn newNums;\r\n}\r\n\r\nasync function selectionSortAlgorithm(sortingVisualizer: SortingVisualizer) {\r\n\tconst { nums, msBetweenSwaps } = sortingVisualizer.state;\r\n\r\n\tfor (let i = 0; i < nums.length; i++) {\r\n\t\tlet lowestIndex = i;\r\n\t\tfor (let j = 0; j < nums.length - i; j++)\r\n\t\t\tif (nums[i + j] < nums[lowestIndex]) lowestIndex = i + j;\r\n\r\n\t\tlet x = nums[i];\r\n\t\tnums[i] = nums[lowestIndex];\r\n\t\tnums[lowestIndex] = x;\r\n\r\n\t\tawait sortingVisualizer.setState({\r\n\t\t\tnums: nums,\r\n\t\t});\r\n\t\tawait delay(msBetweenSwaps);\r\n\t}\r\n}\r\n\r\nasync function bogoSortAlgorithm(sortingVisualizer: SortingVisualizer) {\r\n\tconst { nums, msBetweenSwaps } = sortingVisualizer.state;\r\n\r\n\tlet sorted = false;\r\n\twhile (!sorted) {\r\n\t\tsorted = true;\r\n\t\tfor (let i = 0; i < nums.length - 1; i++) {\r\n\t\t\tif (nums[i] > nums[i + 1]) {\r\n\t\t\t\tsorted = false;\r\n\t\t\t\tawait sortingVisualizer.randomizeNums();\r\n\r\n\t\t\t\tawait delay(msBetweenSwaps);\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nasync function delay(ms: number) {\r\n\treturn new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport { bubbleSortAlgorithm, mergeSortAlgorithm, quickSortAlgorithm, selectionSortAlgorithm, bogoSortAlgorithm }","import React, { Component } from 'react';\r\nimport { bubbleSortAlgorithm, mergeSortAlgorithm, quickSortAlgorithm, selectionSortAlgorithm, bogoSortAlgorithm } from './SortingAlgorithms';\r\nimport './SortingVisualizer.css';\r\n\r\n\r\ntype SortingVisualizerState = {\r\n\tmsBetweenSwaps: number,\r\n\tamountNums: number,\r\n\tnums: number[],\r\n}\r\n\r\nlet sortingVisualizer: SortingVisualizer;\r\nexport default class SortingVisualizer extends Component<{}, SortingVisualizerState> {\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props);\r\n\t\tsortingVisualizer = this;\r\n\r\n\t\tthis.state = {\r\n\t\t\tmsBetweenSwaps: 1,\r\n\t\t\tamountNums: 100,\r\n\t\t\tnums: [],\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tsortingVisualizer.randomizeNums();\r\n\t}\r\n\r\n\tpublic async randomizeNums() {\r\n\t\tconst { nums, amountNums } = sortingVisualizer.state;\r\n\r\n\t\tlet headerHeightStr = window.getComputedStyle(document.documentElement).getPropertyValue(\"--menuBarHeight\");\r\n\t\tlet numContainerHeight: number = window.innerHeight * ((100 - +headerHeightStr.substring(0, headerHeightStr.length - 2)) / 100)\r\n\r\n\t\tlet paddingStr = window.getComputedStyle(document.documentElement).getPropertyValue(\"--sortItemContainerPadding\");\r\n\t\tlet padding = +paddingStr.substring(0, paddingStr.length - 2)\r\n\r\n\t\tlet minHeight = 5;\r\n\t\tlet maxHeight = numContainerHeight - padding * 2 - minHeight;\r\n\r\n\t\tlet newNums: number[] = [];\r\n\t\t// gen new array\r\n\t\tif (nums.length === amountNums)\r\n\t\t\tfor (let i = 0; i < amountNums; i++)\r\n\t\t\t\tnewNums.push(Math.round(Math.random() * maxHeight + minHeight));\r\n\t\t// shrink array\r\n\t\telse if (nums.length > amountNums)\r\n\t\t\tnewNums = nums.slice(0, amountNums);\r\n\t\t// extend array\r\n\t\telse {\r\n\t\t\tlet newNumsAmount = amountNums - nums.length;\r\n\t\t\tnewNums = nums;\r\n\r\n\t\t\tfor (let i = 0; i < newNumsAmount; i++)\r\n\t\t\t\tnewNums.push(Math.round(Math.random() * maxHeight + minHeight));\r\n\t\t}\r\n\r\n\t\tsortingVisualizer.setState({\r\n\t\t\tnums: newNums,\r\n\t\t});\r\n\t}\r\n\tnumAmountSliderChange(event: any) {\r\n\t\tsortingVisualizer.setNumAmount(+event.target.value);\r\n\t}\r\n\tasync setNumAmount(amount: number) {\r\n\t\tawait sortingVisualizer.setState({\r\n\t\t\tamountNums: amount,\r\n\t\t})\r\n\r\n\t\tsortingVisualizer.randomizeNums();\r\n\t}\r\n\r\n\tmsBetweenInputChange(event: any) {\r\n\t\tlet ms = +event.target.value;\r\n\t\tconsole.log(typeof ms);\r\n\r\n\t\tif (isNaN(ms)) return;\r\n\r\n\t\tsortingVisualizer.setMSBetween(ms);\r\n\t}\r\n\tsetMSBetween(ms: number) {\r\n\t\tsortingVisualizer.setState({\r\n\t\t\tmsBetweenSwaps: ms,\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tasync bubbleSort() {\r\n\t\tbubbleSortAlgorithm(sortingVisualizer);\r\n\t}\r\n\tasync mergeSort() {\r\n\t\tmergeSortAlgorithm(sortingVisualizer);\r\n\t}\r\n\tasync quickSort() {\r\n\t\tquickSortAlgorithm(sortingVisualizer);\r\n\t}\r\n\tasync selectionSort() {\r\n\t\tselectionSortAlgorithm(sortingVisualizer);\r\n\t}\r\n\tasync bogoSort() {\r\n\t\tbogoSortAlgorithm(sortingVisualizer);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { nums, amountNums, msBetweenSwaps } = sortingVisualizer.state;\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<div className=\"menuBar\">\r\n\t\t\t\t\t<div className=\"menuBarSettingsContainer\">\r\n\t\t\t\t\t\t<label className=\"menuBarSettingsLabel\">size of array</label>\r\n\t\t\t\t\t\t<input type=\"range\" min=\"10\" max={Math.round(window.innerWidth / 5)} value={amountNums} step=\"1\" onChange={sortingVisualizer.numAmountSliderChange} id=\"arraySizeSlider\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"menuBarSettingsContainer\">\r\n\t\t\t\t\t\t<label className=\"menuBarSettingsLabel\">ms between swaps</label>\r\n\t\t\t\t\t\t<input type=\"text\" value={msBetweenSwaps} onChange={sortingVisualizer.msBetweenInputChange} className=\"menuBarTextInput\" id=\"msBetweenInput\" />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button className=\"menuBarBtn\" onClick={sortingVisualizer.randomizeNums}>randomize array</button>\r\n\r\n\t\t\t\t\t<div className=\"menuBarItemDivider\" />\r\n\r\n\t\t\t\t\t<button className=\"menuBarBtn\" onClick={sortingVisualizer.bubbleSort}>bubble sort</button>\r\n\t\t\t\t\t<button className=\"menuBarBtn\" onClick={sortingVisualizer.mergeSort}>merge sort</button>\r\n\t\t\t\t\t<button className=\"menuBarBtn\" onClick={sortingVisualizer.quickSort}>quick sort</button>\r\n\t\t\t\t\t<button className=\"menuBarBtn\" onClick={sortingVisualizer.selectionSort}>selection sort</button>\r\n\t\t\t\t\t<button className=\"menuBarBtn\" onClick={sortingVisualizer.bogoSort}>bogo sort</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"sortItemContainer\">\r\n\t\t\t\t\t{nums.map((value: number, key) => (\r\n\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\tclassName=\"sortItem\"\r\n\t\t\t\t\t\t\tkey={key}\r\n\t\t\t\t\t\t\tstyle={{ height: `${value}px` }}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t)\r\n\r\n\t}\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer ></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}